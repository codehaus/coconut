Primary concern
 * storage
 
Secondary concerns
 * Tree caching
 * Singletons
 * Management (JMX)
 
Ternary concerns
 * Distributed version

v alpha 3 Late October - the more-features period

   V Unsafe cache Implementation (100 % coverage), Supporting
       V Cache Entry (copy based or direct refence to entry, or dependent on cache)
                     er faktisk næsten mest tilhænger af dependent on cache
       V Events hmm just initial support


   V special policy to handle cases where the time is not enough to determine
     if a cache entry is expired (override method)
     ExpirationPolicy - use a filter instead that takes a cache entry and returns true if it is still valid or false if it should be evicted or vice versa
     isExpired(CacheEntry entry); accept implements Filter<CacheEntry<K,V>> {
     
   V support for cost/size based for unsafe, hmm
     we need some to calculate cost, size, also some polices might base stuff on the 
     particular value and not just the key.
     We might need a policy interface, taken cost/size + cache entry dumping the current cost based policy and
     add a add(CacheEntry<K,V) method
     But make sure the policy only store, this also means though, that cache policy must be moved to cache-api


   V Eviction
       *15* periodically evict caches
        evict ttl policies -> block on Delay queue (bad idea i think)
                           -> every minute - expunge all delayed.
                evict parameter
                
   * tck 100 % done for no concurrency (semantics are clear for every method)
   
   * 80 % test coverage

   * Synchronous cache Implementation (based on MutableCacheEntry,100 % coverage), Supporting
        Cache Loading
        Cache Entry
        Expiration
        Events 
        Locking of individual elements for synchronous


 
v alpha 5 late july <-public fanfare - the concurrent period

   * Internal Threaded
   
   * tck done for concurrent
   
   * Sample xml for configuration
   
   * Pretty much done with XML configuration
  
   85 % test coverage
   1 more type of cache: concurrent

   -Store
   *20* simple nio based store
   *15* Berkeley JavaDB for proof of concept
   *  * Derby

v Alpha 5 early sep 


   * belady min - fast implementation

  * XML Schema for configuration

SVN
   85% test coverage
   *?* concurrent policies  support for LRU/FIFO/MRU for concurrent cache.
 
  Transports
  *?* JGroups, bamboo - look in activemq
  *?* probably just simple jms stuff.
v Beta 1 mid jul
   *?* 90 % test coverage
   
   -CacheAnalyzer

v Beta 2  early okt
   95 % test coverage

v RC late sep
   98 % test coverage

v Release start of okt
   *?* 98 % test coverage


v 5.1 - alpha1 nov
 -Transactional Cache
 -Versionable 

-----IDEAS-----
 - Do we need a evicted() on cacheanalyzer??
 - Treebased caching as in jboss caching
 should we replace CacheEvent.getCache with UUID getCacheUUID.
 
 
 Types of Caches in CoconutCache

---------
Memory-Based caches

UnlimitedCache
UnlimitedTimeoutableCache
MemoryCache             <- specify no policy acts as unlimited <-
SynchronousMemoryCache
SingleThreadedMemoryCache
Soft reference caches
-------------

Disk-Based Caches

v 5.2
A simple tool for generating load. specify for eksample, zipf distribution , 80 % get, 20 % put, 10 thread
Then you could draw a get/put ratio on y axis, time on x, for all the different cache types.

//should be put into benchmark

Turned down ideas 
 - get(K key, CacheLoader loader) - no
 
 
----------------------- Prev versions ---------------------------------
 
 v alpha 2 - 20 jan - the unsafe period
   V Support for simple policies for unsafe

   V Simple Unsafe cache implementation, only supporting loading, 100 % coverage

   V Polices costbased - Landlord (simple for proof of concept)
  
   V 70 % test coverage (Overall) for cache-api, cache-policies, cache-impl
   
   V tck 80 % done for no concurrency

   * Unsafe cache Implementation (85 % coverage), Supporting
       V Cache Loading
       * Cache Entry (copy based or direct refence to entry, or dependent on cache)
                     er faktisk næsten mest tilhænger af dependent on cache
       V Expiration
       V Eviction
       * Events hmm just initial support
 