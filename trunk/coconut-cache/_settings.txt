 
Store
 * Handle evicted items -> should be stored
 * Handle expired items -> should we store these? no they are dead
 * Handle put items     -> Writethrough
 * handle removed, also iterator remove -> probably ignore

ThreadManager
  -> performClear(long time, TimeUnit unit) 
  -> performEviction(long time, TimeUnit unit) 

-----------------------

? If values take a long time to construct, we might want to do background construction (loading) for
all evicted entries. Not as we currently do, where the first one calling update has to do the actual loading.
? what to do on clear with loaders? (stopAllLoaders() method?)

? what to do on put/replace with some key that is being loaded. -> just override the value me think

 * implemented
 - idea
 (Memory Caches : Caches that entirely defined in memory->)

   UnlimitedMemoryCache
     * failOnNullGet -> no gets return null but fail
   UnlimitedLoadableMemoryCache (supports CacheLoader)     
     - putOverride -> any thread waiting for another thread to load a value
                      Will return a value that is added with a put for the
                      corresponding key.
     - ignoreLoaderExceptions -> any exceptions thrown by a loader is ignored.

strict &
nostrict & call
nostrict & nocall 
  strict                  non strict    noCall   call
  carenot noCallToEvict                           
   UnlimitTimeoutableMemoryCache - no threads
             EventCache
      Events, 
      
     none -> seqid=0;
     unique inc -> unique increasing numbers
     putconsist -> put(a,"1") , put(a,"2") . "1".seqid<"2".seqId
     strong -> put(a,"1") , get(a)="1" -> put.seqid<get.seqid
     VeryStrong -> clear ->
      
 
 ------
 Backed Cache, 
 
----
 
 Transactions.
 
 --------
 
-> lowest level
  -> no messaging
  -> no expiration
  -> no size limits
  -> no hit statistics 
  -> no CacheLoader
  -> no back cache
  -> no Transactions
   
-> next lowest
  -> no messaging
  -> no expiration
  -> no size limits
  -> no hit statistics 
  -> no back cache
  -> no Transactions

-> next lowest
  -> no messaging
  -> no size limits
  -> no hit statistics 
  -> no back cache
  -> no Transactions

-> next lowest
  -> no size limits
  -> no hit statistics 
  -> no back cache
  -> no Transactions

-> next lowest
  -> no back cache
  -> no Transactions

-> next lowest
  -> no Transactions
  
readable | readablewriteable
nonloadable | loadable

