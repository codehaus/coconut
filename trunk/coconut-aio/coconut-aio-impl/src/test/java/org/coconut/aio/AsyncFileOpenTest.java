package org.coconut.aio;

import java.io.File;
import java.io.IOException;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * @author <a href="mailto:kasper@codehaus.org">Kasper Nielsen </a>
 */
public class AsyncFileOpenTest extends AioTestCase {

    public void testOpenFile() throws IOException {
        final AsyncFile file = getFactory().openFile();
        file.openFile(createTmpFile(), "r").getIO();

        assertTrue(file.isOpen());
        assertFalse(file.isWritable());

        file.close().getIO();
    }

    public void testOpenFileName() throws IOException {
        final AsyncFile file = getFactory().openFile();
        file.openFile(createTmpFile().getAbsolutePath(), "r").getIO();

        assertTrue(file.isOpen());
        assertFalse(file.isWritable());

        file.close().getIO();
    }

    public void testOpenIllegalMode() throws IOException {
        final AsyncFile file = getFactory().openFile();

        try {
            file.openFile(createTmpFile(), "rdf");
        } catch (IllegalArgumentException e) {
            return;
        } finally {
            file.close().getIO();
        }
        fail("did not throw exception");
    }

    public void testOpenFileWritable() throws IOException {
        final AsyncFile file = getFactory().openFile();

        file.openFile(createTmpFile(), "rw").getIO();

        assertTrue(file.isOpen());
        assertTrue(file.isWritable());

        file.close().getIO();
    }

    public void testOpenFileNameWritable() throws IOException {
        final AsyncFile file = getFactory().openFile();

        file.openFile(createTmpFile().getAbsolutePath(), "rw").getIO();

        assertTrue(file.isOpen());
        assertTrue(file.isWritable());

        file.close().getIO();
    }
    public void testOpenFileOfferableWritableSync() throws IOException, InterruptedException {
        BlockingQueue<Object> q = new LinkedBlockingQueue<Object>();
        final AsyncFile file = getFactory().openFile(q);
        final File f = createTmpFile();

        file.openFile(f, "rws");

        AsyncFile.Opened opened = (AsyncFile.Opened) awaitOnQueue(q);
        assertEquals("rws", opened.getMode());
        assertEquals(file, opened.async());
        assertEquals(f, opened.getFile());
        assertTrue(file.isOpen());
        assertTrue(file.isWritable());
        // getter for sync status?
        file.close().getIO();
    }

    public void testOpenFileOfferableWritableSyncMetadata() throws IOException,
        InterruptedException {
        BlockingQueue q = new LinkedBlockingQueue();
        final AsyncFile file = getFactory().openFile(q);
        final File f = createTmpFile();

        file.openFile(f, "rwd");

        AsyncFile.Opened opened = (AsyncFile.Opened) awaitOnQueue(q);
        assertEquals("rwd", opened.getMode());
        assertEquals(file, opened.async());
        assertEquals(f, opened.getFile());
        assertTrue(file.isOpen());
        assertTrue(file.isWritable());
        file.close().getIO();
    }

}