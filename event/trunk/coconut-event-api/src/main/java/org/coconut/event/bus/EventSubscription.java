/* Copyright 2004 - 2007 Kasper Nielsen <kasper@codehaus.org> Licensed under 
 * the Apache 2.0 License, see http://coconut.codehaus.org/license.
 */
package org.coconut.event.bus;

import org.coconut.core.EventProcessor;
import org.coconut.predicate.Predicate;
import org.coconut.predicate.Predicates;

/**
 * This interface represent a subscription of a particular sets of events by its predicate
 * delivered to its listener.
 * <p>
 * Each subscription has a unique name. If no name is specified at construction time an
 * unique name will be generated by the event container.
 * 
 * @author <a href="mailto:kasper@codehaus.org">Kasper Nielsen</a>
 * @version $Id: EventSubscription.java 472 2007-11-19 09:34:26Z kasper $
 * @param <E>
 *            the type of events that this subscription acccepts
 */
public interface EventSubscription<E> {

    /**
     * Returns the name of this subscription.
     * 
     * @return the name of this subscription
     */
    String getName();

    /**
     * Returns the listener for this subscription.
     * 
     * @return the listener for this subscription
     */
    EventProcessor<? super E> getEventProcessor();

    /**
     * Returns the predicate that is used for this subscription, or
     * {@link Predicates#TRUE} if all events are accepted.
     * 
     * @return the predicate that is used for this subscription
     */
    Predicate<? super E> getFilter();

    /**
     * Cancels the subscription. After this method has returned no further events will be
     * delivered to the specified event processor.
     */
    void unsubscribe();

    /**
     * Returns whether or not this subscription is still valid (has not been cancelled).
     * 
     * @return whether or not this subscription is still valid
     */
    boolean isValid();
}
